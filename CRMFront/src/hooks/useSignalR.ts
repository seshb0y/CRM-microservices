import { useEffect } from "react";
import { HubConnectionBuilder, HubConnection, LogLevel } from "@microsoft/signalr";
import { useDispatch } from "react-redux";
import { addClientRealtime, changeClientRealtime, deleteClientRealtime, fetchClientsWithOrdersAndTasks } from "../features/clients/clientSlice";
import { addUserRealtime, changeUserRealtime, deleteUserRealtime } from "../features/user/userSlice";
import { addOrderRealtime,  deleteOrderRealtime } from "../features/orders/orderSlice";
import {  changeTaskRealtime, } from "../features/tasks/tasksSlice";
import { toast } from "react-toastify";
import { AppDispatch } from "../store/store";

export const useSignalR = () => {
  const dispatch = useDispatch<AppDispatch>();

  const signalrUrl = import.meta.env.PROD
  ? import.meta.env.VITE_PRODUCTION_SIGNALR_URL
  : import.meta.env.VITE_SIGNALR_URL;

  console.log("SignalR URL:", signalrUrl);
  
  useEffect(() => {
    let connection: HubConnection;

    
    const startConnection = async () => {
      try {
        connection = new HubConnectionBuilder()
          .withUrl(signalrUrl)
          .withAutomaticReconnect()
          .configureLogging(LogLevel.Information)
          .build();

        connection.onreconnecting(() => {
          toast.info("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...");
        });

        connection.onreconnected(() => {
          toast.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
          dispatch(fetchClientsWithOrdersAndTasks());
        });

        connection.onclose((error) => {
          if (error) {
            toast.error("–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
          }
        });

        
        connection.on("ClientCreated", (data) => {
          console.log("üì° –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:", data);
          dispatch(addClientRealtime(data));
        });
        
        connection.on("ClientDeleted", (data) => {
          console.log("üì° –£–¥–∞–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç:", data);
          dispatch(deleteClientRealtime(data));
        });
        
        connection.on("ClientUpdated", (data) => {
          console.log("üì° –û–±–Ω–æ–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç:", data);
          dispatch(changeClientRealtime(data));
        });

        
        connection.on("NewUserRegistered", (data) => {
          console.log("üì° –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", data);
          dispatch(addUserRealtime(data));
        });

        connection.on("UserUpdated", (data) => {
          console.log("üì° –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", data);
          dispatch(changeUserRealtime(data));
        });
        
        connection.on("UserDeleted", (data) => {
          console.log("üì° –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", data);
          dispatch(deleteUserRealtime(data));
        });

        
        connection.on("OrderCreated", (data) => {
          console.log("üì° –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:", data);
          dispatch(addOrderRealtime(data));
        });

        connection.on("OrderUpdated", (data) => {
          console.log("üì° –û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–∫–∞–∑:", data);
          window.dispatchEvent(new CustomEvent('orderUpdated'));
          dispatch(fetchClientsWithOrdersAndTasks());
        });

        connection.on("ResponsibleUpdated", (data: { userId: number; orderId: number }) => {
          console.log("üì° –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ:", data);
          window.dispatchEvent(new CustomEvent('responsibleUpdated'));
          dispatch(fetchClientsWithOrdersAndTasks());
        });

        connection.on("OrderDeleted", (data) => {
          console.log("üì° –£–¥–∞–ª–µ–Ω –∑–∞–∫–∞–∑:", data);
          dispatch(deleteOrderRealtime(data));
        });

        
        connection.on("TaskCreated", (data) => {
          console.log("üì° –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:", data);
          window.dispatchEvent(new CustomEvent('taskCreated'));
          dispatch(fetchClientsWithOrdersAndTasks());
        });

        connection.on("TaskUpdated", (data) => {
          console.log("üì° –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:", data);
          dispatch(changeTaskRealtime(data));
        });

        connection.on("TaskDeleted", (data) => {
          console.log("üì° –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:", data);
          window.dispatchEvent(new CustomEvent('taskDeleted'));
          dispatch(fetchClientsWithOrdersAndTasks());
        });

        await connection.start();
        toast.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É");

      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:", error);
        toast.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
        setTimeout(startConnection, 5000);
      }
    };

    void startConnection();

    return () => {
      if (connection) {
        connection.stop()
          .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ SignalR:", err));
      }
    };
  }, [dispatch]);
};
